
- Add locks so we don't have two processes calculating the same thing.
	I can only see this working if we are passed a constructor to a lock.





- Decide how to let store handle it's own expiry.
    It could understand the protocol (ie get/set a 2-tuple) and proxy that
    out to the proper methods. If the object has a ttl we should
    use that instead, but understand that it may actually be longer.

- Make heirarchical namespaces apply to decorated functions too.

	@cache(namespace='a')
	def f(): pass
	
	f.get(namespace='b') -> key = 'a:b:__module__.f()'
	
- Name this.
	- MemoStore
	- EasyCache
	- SimpleCache
	- AutoCache
	- MemoCache
	